version: "3.8"

services:
  database:
    image: postgres:13.3-alpine
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data/

  backend:
    build:
      context: "./api"
      target: prod
    environment:
      - APP_PORT
      - APP_HOSTNAME
      - DB_USER
      - DB_PASSWORD
      - DB_HOST
    env_file: ".env"
    expose:
      - 4000
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      - "traefik.http.routers.backend.rule=Host(`contacts.blanknodes.com`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.port=80"
    depends_on:
      - database

  client:
    build:
      context: "./client"
      target: prod
    ports:
      - "3000:3000"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      - "traefik.http.routers.client.rule=Host(`contacts.blanknodes.com`)"
      - "traefik.http.routers.client.tls=true"
      - "traefik.http.routers.client.tls.certresolver=letsencrypt"
      - "traefik.port=80"
    depends_on:
      - backend

  traefik:
    image: traefik:v2.4
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "$PWD/traefik/traefik.prod.toml:/etc/traefik/traefik.toml"
    depends_on:
      - backend
      - client

volumes:
  postgres_data:

networks:
  default:
    external:
      name: traefik
